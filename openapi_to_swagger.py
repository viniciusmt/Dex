"""Utilities to convert FastAPI OpenAPI (3.x) spec to Swagger 2.0."""
from __future__ import annotations
from typing import Any, Dict


def _replace_refs(obj: Any) -> Any:
    """Recursively replace component references with Swagger 2 equivalents."""
    if isinstance(obj, dict):
        new = {}
        for k, v in obj.items():
            if k == "$ref" and isinstance(v, str):
                v = v.replace("#/components/schemas/", "#/definitions/")
                v = v.replace("#/components/securitySchemes/", "#/securityDefinitions/")
            new[k] = _replace_refs(v)
        return new
    if isinstance(obj, list):
        return [_replace_refs(i) for i in obj]
    return obj


def convert_openapi_to_swagger(openapi: Dict[str, Any]) -> Dict[str, Any]:
    """Convert a minimal OpenAPI 3.x spec to Swagger 2.0.

    The converter focuses on features generated by FastAPI: schemas, request bodies
    and responses with JSON content. It is not a full specification converter but
    suffices for typical FastAPI applications.
    """
    swagger: Dict[str, Any] = {
        k: v for k, v in openapi.items() if k not in {"openapi", "components"}
    }
    swagger["swagger"] = "2.0"

    components = openapi.get("components", {})
    if "schemas" in components:
        swagger["definitions"] = components["schemas"]
    if "securitySchemes" in components:
        swagger["securityDefinitions"] = components["securitySchemes"]

    # Replace component references throughout the document
    swagger = _replace_refs(swagger)

    for path, methods in swagger.get("paths", {}).items():
        for method, operation in methods.items():
            if not isinstance(operation, dict):
                continue
            # Convert requestBody to parameter in body
            request_body = operation.pop("requestBody", None)
            if request_body:
                content = request_body.get("content", {})
                media = next(iter(content.values()), {})
                schema = media.get("schema")
                params = operation.setdefault("parameters", [])
                params.append(
                    {
                        "in": "body",
                        "name": "body",
                        "required": request_body.get("required", False),
                        "schema": schema or {},
                    }
                )
            # Convert responses content to schema
            for resp in operation.get("responses", {}).values():
                if not isinstance(resp, dict):
                    continue
                content = resp.pop("content", None)
                if content:
                    media = next(iter(content.values()), {})
                    schema = media.get("schema")
                    if schema:
                        resp["schema"] = schema
    return swagger
